library(tidyquant)
library(stringr)
library(tibble)
library(lemon)
library(kableExtra)
library(purrr)
library(rjson)
library(rlist)
# Lade JSON Datei aus js-export
json <- fromJSON(file = "C:\\Users\\admin\\Documents\\Alles mit JS\\DEGIRO_API\\Ergebnis\\ergebnis.json")
#Lade alle Symbole aus txt
txt_symbols <- read.csv("AKTIEN_SYMBOLE.txt", sep = ",", header = F)
txt_symbols <- as.character(t(txt_symbols))
# Funktion um HDAX Werte zu laden
werte_hdax_fct <- function(x){
wert_temp <- try(na.omit(getSymbols(x, src = "yahoo", from = today() -days(260), to = today(), auto.assign = F, warnings = F)))
return(wert_temp)
}
# Lade und packe alle werte in die Liste
# hdax_list <- list()
# for (x in seq_along(txt_symbols)){
#   hdax_list[[x]] <-  werte_hdax_fct(txt_symbols[x]);
# }
hdax_list <- try(sapply(txt_symbols, werte_hdax_fct)); #### WARUM NUR MACHST DU JETZT PROBLEME?!
help_df <- list(hdax_list$DLG.DE,hdax_list$ZAL.DE,hdax_list$MUV2.DE, hdax_list$NEM.DE, hdax_list$EVT.DE, hdax_list$LIN.DE, hdax_list$NDX1.DE )
# Lade JSON Datei aus js-export
json <- fromJSON(file = "C:\\Users\\admin\\Documents\\Alles mit JS\\DEGIRO_API\\Ergebnis\\ergebnis.json")
#Lade alle Symbole aus txt
txt_symbols <- read.csv("AKTIEN_SYMBOLE.txt", sep = ",", header = F)
txt_symbols <- as.character(t(txt_symbols))
# Funktion um HDAX Werte zu laden
werte_hdax_fct <- function(x){
wert_temp <- try(na.omit(getSymbols(x, src = "yahoo", from = today() -days(260), to = today(), auto.assign = F, warnings = F)))
return(wert_temp)
}
# Lade und packe alle werte in die Liste
# hdax_list <- list()
# for (x in seq_along(txt_symbols)){
#   hdax_list[[x]] <-  werte_hdax_fct(txt_symbols[x]);
# }
hdax_list <- try(sapply(txt_symbols, werte_hdax_fct)); #### WARUM NUR MACHST DU JETZT PROBLEME?!
help_df <- list(hdax_list$DLG.DE,hdax_list$ZAL.DE,hdax_list$MUV2.DE, hdax_list$NEM.DE, hdax_list$EVT.DE, hdax_list$LIN.DE, hdax_list$NDX1.DE )
# Lade JSON Datei aus js-export
json <- fromJSON(file = "C:\\Users\\admin\\Documents\\Alles mit JS\\DEGIRO_API\\Ergebnis\\ergebnis.json")
#Lade alle Symbole aus txt
txt_symbols <- read.csv("AKTIEN_SYMBOLE.txt", sep = ",", header = F)
txt_symbols <- as.character(t(txt_symbols))
# Funktion um HDAX Werte zu laden
werte_hdax_fct <- function(x){
wert_temp <- try(na.omit(getSymbols(x, src = "yahoo", from = today() -days(260), to = today(), auto.assign = F, warnings = F)))
return(wert_temp)
}
# Lade und packe alle werte in die Liste
# hdax_list <- list()
# for (x in seq_along(txt_symbols)){
#   hdax_list[[x]] <-  werte_hdax_fct(txt_symbols[x]);
# }
hdax_list <- try(sapply(txt_symbols, werte_hdax_fct)); #### WARUM NUR MACHST DU JETZT PROBLEME?!
View(json)
help_df <- list(hdax_list$DLG.DE,hdax_list$ZAL.DE,hdax_list$MUV2.DE, hdax_list$NEM.DE, hdax_list$EVT.DE, hdax_list$LIN.DE, hdax_list$NDX1.DE )
json$Orders[[1]]
json$Orders[[1]][1]
json$Orders[[1]][1]$openOrders
json$Orders[[1]][1]$openOrders[[1]]
json$Orders[[1]][1]$openOrders[[]]
json$Orders[[1]][1]$openOrders[[1]] <- 1
json$Orders[[1]][1]$openOrders
json$Orders[[1]][1]$openOrders[1]
json$Orders[[1]][1]$openOrders[[1]]
unlist(json$Orders[[1]][1]$openOrders)
json$Orders[[2]]
json$Orders[[1]][1]
json$Orders[[1]]
json <- fromJSON(file = "C:\\Users\\admin\\Documents\\Alles mit JS\\DEGIRO_API\\Ergebnis\\ergebnis.json")
json$Orders[[1]]
json$Orders[[1]]$cancelledOrders
unlist(json$Orders[[1]]$cancelledOrders)
openOrders <- unlist(json$Orders[[1]]$openOrders)
canceledOrders <-unlist(json$Orders[[1]]$cancelledOrders)
completedOrders <-unlist(json$Orders[[1]]$completedOrders)
depot_tabelle <- data.frame(
Offene_Order = openOrders,
Cancelled_Orders = Cancelled_Orders,
Completed_Orders = completedOrders
)
cancelledOrders <-unlist(json$Orders[[1]]$cancelledOrders)
completedOrders <-unlist(json$Orders[[1]]$completedOrders)
depot_tabelle <- data.frame(
Offene_Order = openOrders,
Cancelled_Orders = Cancelled_Orders,
Completed_Orders = completedOrders
)
depot_tabelle <- data.frame(
Offene_Order = openOrders,
Cancelled_Orders = cancelled_Orders,
Completed_Orders = completedOrders
)
depot_tabelle <- data.frame(
Offene_Order = openOrders,
Cancelled_Orders = cancelled_orders,
Completed_Orders = completedOrders
)
cancelledOrders <-unlist(json$Orders[[1]]$cancelledOrders)
depot_tabelle <- data.frame(
Offene_Order = openOrders,
Cancelled_Orders = cancelledOrders,
Completed_Orders = completedOrders
)
View(depot_tabelle)
depot_tabelle <- data.frame(
Offene_Order = if(is.null(openOrders)) "Keine",
Cancelled_Orders = cancelledOrders,
Completed_Orders = completedOrders
)
depot_tabelle <- data.frame(
Offene_Order = if(is.null(openOrders){ print("Keine")})
openOrders
if(is.null(unlist(json$Orders[[1]]$openOrders))){ openOrders <- "Keine"
}else{
openOrders <- unlist(json$Orders[[1]]$openOrders)
}
if(is.null(unlist(json$Orders[[1]]$openOrders))){ openOrders <- "Keine"
}else{
openOrders <- unlist(json$Orders[[1]]$openOrders)
}
if(is.null(unlist(json$Orders[[1]]$cancelledOrders))){ openOrders <- "Keine"
}else{
cancelledOrders <-unlist(json$Orders[[1]]$cancelledOrders)
}
if(is.null(unlist(json$Orders[[1]]$completedOrders))){ openOrders <- "Keine"
}else{
completedOrders <-unlist(json$Orders[[1]]$completedOrders)
}
depot_tabelle <- data.frame(
Offene_Order = openOrders,
Cancelled_Orders = cancelledOrders,
Completed_Orders = completedOrders
)
if(is.null(unlist(json$Orders[[1]]$openOrders))){ openOrders <- "Keine"
}else{
openOrders <- unlist(json$Orders[[1]]$openOrders)
}
if(is.null(unlist(json$Orders[[1]]$cancelledOrders))){ openOrders <- "Keine"
}else{
cancelledOrders <-unlist(json$Orders[[1]]$cancelledOrders)
}
unlist(json$Orders[[1]]$cancelledOrders)
is.null(unlist(json$Orders[[1]]$cancelledOrders))
if(is.null(unlist(json$Orders[[1]]$cancelledOrders))){ openOrders <- "Keine"
}else{
cancelledOrders <-unlist(json$Orders[[1]]$cancelledOrders)
}
if(is.null(unlist(json$Orders[[1]]$cancelledOrders))){ cancelledOrders<- "Keine"
}else{
cancelledOrders <-unlist(json$Orders[[1]]$cancelledOrders)
}
depot_tabelle <- data.frame(
Offene_Order = openOrders,
Cancelled_Orders = cancelledOrders,
Completed_Orders = completedOrders
)
if(is.null(unlist(json$Orders[[1]]$completedOrders))){ completedOrders <- "Keine"
}else{
completedOrders <-unlist(json$Orders[[1]]$completedOrders)
}
depot_tabelle <- data.frame(
Offene_Order = openOrders,
Cancelled_Orders = cancelledOrders,
Completed_Orders = completedOrders
)
order_Table <- data.frame(
Offene_Order = openOrders,
Cancelled_Orders = cancelledOrders,
Completed_Orders = completedOrders
)
View(order_Table)
if(is.null(unlist(json$Orders[[1]]$openOrders))){ openOrders <- "Keine"
}else{
openOrders <- unlist(json$Orders[[1]]$openOrders)
}
if(is.null(unlist(json$Orders[[1]]$cancelledOrders))){ cancelledOrders<- "Keine"
}else{
cancelledOrders <-unlist(json$Orders[[1]]$cancelledOrders)
}
if(is.null(unlist(json$Orders[[1]]$completedOrders))){ completedOrders <- "Keine"
}else{
completedOrders <-unlist(json$Orders[[1]]$completedOrders)
}
order_Table <- data.frame(
Offene_Order = openOrders,
Cancelled_Orders = cancelledOrders,
Completed_Orders = completedOrders
)
order_Table %>%
knitr::kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
degiro_table <- data.frame(
)
json$name
getNamesJSON <- function(x){
for(i in seq_along(x$name)){
temp_name[i] <- x$name[i]
}
return (temp_name)
}
degiro_table <- data.frame(
Name = getNamesJSON(json)
)
seq_along(json)
getNamesJSON <- function(x){
temp_name <- seq_along(x$name)
for(i in seq_along(x$name)){
temp_name[i] <- x$name[i]
}
return (temp_name)
}
degiro_table <- data.frame(
Name = getNamesJSON(json)
)
View(degiro_table)
json$Gesamt
getWertJSON <- function(x){
temp_wert <- seq_along(x$Gesamt)
for(i in seq_along(x$Gesamt)){
temp_wert[i] <- x$Gesamt[i]
}
return (temp_wert)
}
degiro_table <- data.frame(
Name = getNamesJSON(json),
'Depot Wert' = getWertJSON(json)
)
degiro_table <- data.frame(
Name = paste(getNamesJSON(json), '€'),
'Depot Wert' = getWertJSON(json)
)
degiro_table <- data.frame(
Name = getNamesJSON(json),
'Depot Wert' = paste(getWertJSON(json), '€')
)
degiro_table <- data.frame(
Name = getNamesJSON(json),
'Depot_Wert' = paste(getWertJSON(json), '€')
)
json$`G/V`
getPerformanceJSON <- function(x){
temp_wert <- seq_along(x$Gesamt)
for(i in seq_along(x$Gesamt)){
temp_wert[i] <- x$'G/V'[i]
}
return (temp_wert)
}
degiro_table <- data.frame(
Name = getNamesJSON(json),
'Depot_Wert' = paste(getWertJSON(json), '€'),
Performance_Aktuelles_Portfolio = paste(getPerformanceJSON(json), '€')
)
getPerformanceJSON <- function(x){
temp_wert <- seq_along(x$Gesamt)
for(i in seq_along(x$Gesamt)){
temp_wert[i] <- round(x$'G/V'[i], digits = 2)
}
return (temp_wert)
}
degiro_table <- data.frame(
Name = getNamesJSON(json),
'Depot_Wert' = paste(getWertJSON(json), '€'),
Performance_Aktuelles_Portfolio = paste(getPerformanceJSON(json), '€')
)
# Tabelle schön darstellen
degiro_table %>%
knitr::kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
getAnzahlJSON <- function(x){
temp_wert <- seq_along(x$Gesamt)
for(i in seq_along(x$Gesamt)){
temp_wert[i] <- round(x$Anzahl[i], digits = 0)
}
return (temp_wert)
}
# Erstelle Tabelle
degiro_table <- data.frame(
Name = getNamesJSON(json),
Anzahl = getAnzahlJSON(json),
'Depot_Wert' = paste(getWertJSON(json), '€'),
Performance_Aktuelles_Portfolio = paste(getPerformanceJSON(json), '€')
)
# Tabelle schön darstellen
degiro_table %>%
knitr::kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Erstelle Tabelle
degiro_table <- data.frame(
Name = getNamesJSON(json),
Anzahl = getAnzahlJSON(json),
'Depot_Wert' = paste(getWertJSON(json), '€'),
Performance_Aktuelles_Portfolio = paste(getPerformanceJSON(json), '€')
)
#Lade alle Symbole aus txt
txt_symbols <- read.csv("AKTIEN_SYMBOLE.txt", sep = ",", header = F)
json <- fromJSON(file = "C:\\Users\\admin\\Documents\\Alles mit JS\\DEGIRO_API\\Ergebnis\\ergebnis.json")
json$Anzahl
# Erstelle Tabelle
degiro_table <- data.frame(
Name = getNamesJSON(json),
Anzahl = getAnzahlJSON(json),
'Depot_Wert' = paste(getWertJSON(json), '€'),
Performance_Aktuelles_Portfolio = paste(getPerformanceJSON(json), '€')
)
# Tabelle schön darstellen
degiro_table %>%
knitr::kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
degiro_table[[1]]
degiro_table[1]
degiro_table[,1]
degiro_table[,2]
degiro_table[2,]
degiro_table[8,]
degiro_table[1:7,]
# Entferne letzten Eintrag, da bereits visualisiert
degiro_table <- degiro_table[1:7,]
seq_along(depot_tabelle)
index(depot_tabelle[[i,3]])
index(depot_tabelle[[1,3]])
depot_tabelle[order(depot_tabelle$RSL, decreasing = T),] %>%
knitr::kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
for(i in seq_along(depot_tabelle)){
if(depot_tabelle[[i,3]] < 1){
row_spec(i, bold = T, color = "white", background = "#D7261E")
}
}
depot_tabelle <- data.frame(
Aktie = get_names(help_df),
Wert = get_wert(help_df),
RSL = try(t(wert_rsl(help_df)))
)
wert_heute <- function(x){
wert_temp <- c(1:101)
for(i in seq_along(x)){
wert_temp[i] <- tail(x[[i]][,6], n=1)
}
return (wert_temp)
}
# bsp für EINEN wochenschlusskurs : mean(tail(dlg[,6], n = 130)[120:125])
# Versuche ausschließlich die Namen in eine Liste zu packen
tabelle_namen <- function(x){
namen_tabelle <- tibble(.rows = 101)
for(i in 1:101){
for (y in 1:101) {
}
namen_tabelle[i] <- tibble(names(hdax_list[[i]][,6]))
}
namen_tabelle <- namen_tabelle[1,]
return(namen_tabelle[x])
}
namen_tabelle <- tabelle_namen(1:101)
# Berechnung des RSL einer Aktie ( auf zwei Nachkommestellen genau )
wert_rsl <- function(x){
wochendurchschn_bechtle <- tibble(.rows =27)
letzter_kurs <- tibble(.rows = 1)
rsl_kurse <- tibble(.rows = 1)
for(g in 1:length(x)){
beg <- 125
end <- 130
letzter_kurs[1,g] <- try(wert_heute(x)[[g]])
for(i in 1:26){
if( NA %in% x[[g]][,6]){
wochendurchschn_bechtle[i,g] <- "FALSCHER WERT"
next()
}else{
wochendurchschn_bechtle[i,g] <- try(mean(as.double(unlist(tail(x[[g]][,6],130)[beg:end]))), silent = TRUE)
beg <- beg - 5
end <- end -5
}
}
wochendurchschn_bechtle[27,g] <- try( mean(as.double(unlist(wochendurchschn_bechtle[1:26,g]))) )
rsl_kurse[1,g] <- try((as.double(unlist(letzter_kurs[1,g])))/((as.double(unlist(wochendurchschn_bechtle[27,g])))))
}
return(rsl_kurse)
}
# Alle Namen bekommen
get_names <- function(x){
names_temp <- seq_along(x)
for(i in seq_along(x)){
names_temp[i] <- names(x[[i]][,6])
}
return(names_temp)
}
# Alle Werte bekommen
get_wert <- function(x){
wert_temp <- seq_along(x)
for(i in seq_along(x)){
wert_temp[i] <- as.double(tail(x[[i]][,6])[6])
}
return(wert_temp)
}
# Obige Version kürzen um Tabelle zu erstellen
werte_tabelle <- data.frame(
Aktie = get_names(hdax_list),
Wert = get_wert(hdax_list),
RSL = try(t(wert_rsl(hdax_list)))
)
depot_tabelle <- data.frame(
Aktie = get_names(help_df),
Wert = get_wert(help_df),
RSL = try(t(wert_rsl(help_df)))
)
# Schönes Format für alle Werte der Tabelle
werte_tabelle$Wert <- format(as.numeric(werte_tabelle$Wert),trim = T)
werte_tabelle$RSL <-  format(as.numeric(werte_tabelle$RSL),trim = T)
depot_tabelle$Wert <- format(as.numeric(depot_tabelle$Wert),trim = T)
depot_tabelle$RSL <-  format(as.numeric(depot_tabelle$RSL),trim = T)
# #Wandle Performace (%) in Prozent um
# werte_tabelle$Perf_1W <- sprintf("%.1f %%", 100*werte_tabelle$Perf_1W)
# # Spucke alle RSL Werte numerisch aus
# werte_tabelle$RSL <- as.numeric(werte_tabelle$RSL)
# mache eine schöne Tabelle
for(x in seq_along(depot_tabelle$RSL)){
depot_tabelle$RSL[x] <- ifelse("NA" %in% depot_tabelle$RSL[x],"https://www.tradesignalonline.com/scanner/default.aspx", depot_tabelle$RSL[x])
}
depot_tabelle <- depot_tabelle[order(depot_tabelle$RSL, decreasing = T),]
depot_tabelle[order(depot_tabelle$RSL, decreasing = T),] %>%
knitr::kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
for(i in seq_along(depot_tabelle)){
if(depot_tabelle[[i,3]] < 1){
row_spec(i:length(depot_tabelle), bold = T, color = "white", background = "#D7261E")
}
}
View(depot_tabelle)
depot_tabelle[[7,3]] < 1
depot_tabelle[[5,3]] < 1
seq_along(depot_tabelle)
length(depot_tabelle)
depot_tabelle$Aktie
seq_along(depot_tabelle$Aktie)
depot_tabelle[order(depot_tabelle$RSL, decreasing = T),] %>%
knitr::kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
for(i in seq_along(depot_tabelle$Aktie)){
if(depot_tabelle[[i,3]] < 1){
row_spec(i:length(depot_tabelle), bold = T, color = "white", background = "#D7261E")
}
}
depot_tabelle[order(depot_tabelle$RSL, decreasing = T),] %>%
# Function to check RSL and Color ggf
checkForRed <- function(x){
for(i in seq_along(x$Aktie)){
if(x[[i,3]] < 1){
row_spec(i, bold = T, color = "white", background = "#D7261E")
}
}
}
depot_tabelle[order(depot_tabelle$RSL, decreasing = T),] %>%
# Function to check RSL and Color ggf
checkForRed <- function(x){
for(i in seq_along(x$Aktie)){
if(x[[i,3]] < 1){
row_spec(i, bold = T, color = "white", background = "#D7261E")
}
}
}
checkForRed <- function(x){
for(i in seq_along(x$Aktie)){
if(x[[i,3]] < 1){
row_spec(i, bold = T, color = "white", background = "#D7261E")
}
}
}
depot_tabelle[order(depot_tabelle$RSL, decreasing = T),] %>%
knitr::kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
checkForRed()
checkForRed(depot_tabelle)
depot_tabelle[order(depot_tabelle$RSL, decreasing = T),] %>%
knitr::kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
checkForRed()
depot_tabelle$Aktie
checkForRed <- function(){
for(i in seq_along(depot_tabelle$Aktie)){
if(x[[i,3]] < 1){
row_spec(i, bold = T, color = "white", background = "#D7261E")
print("ROT")
}
}
}
depot_tabelle <- depot_tabelle[order(depot_tabelle$RSL, decreasing = T),]
depot_tabelle[order(depot_tabelle$RSL, decreasing = T),] %>%
knitr::kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
checkForRed()
now
now()
# Schreibe JSON Daten in Tabelle + TIMESTAMP um vergleichbar zu machen
json_timestamp <- list()
list.append(json)
json <- fromJSON(file = "C:\\Users\\admin\\Documents\\Alles mit JS\\DEGIRO_API\\Ergebnis\\ergebnis.json")
# Schreibe JSON Daten in Tabelle + TIMESTAMP um vergleichbar zu machen
json_timestamp <- list()
list.append(json)
# Schreibe JSON Daten in Tabelle + TIMESTAMP um vergleichbar zu machen
json_timestamp <- list()
json_timestamp <- list.append(json)
View(json_timestamp)
json <- fromJSON(file = "C:\\Users\\admin\\Documents\\Alles mit JS\\DEGIRO_API\\Ergebnis\\ergebnis.json")
json_timestamp <- list.append(json)
View(json_timestamp)
json_timestamp <- list.append(json)
?list.append
